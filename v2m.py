import ffmpeg
import os
import cv2
import shutil
import numpy as np
import argparse
import re

parser = argparse.ArgumentParser(
            prog='Video2Mcfunction'
            )

parser.add_argument('-i', '--input', help='input Video file path', type=str,required=True)
parser.add_argument('-n', '--name', help=' Output Data/Resource packname', type=str,required=True)
parser.add_argument('-r','--res', help='Output PNG file Resolution default=256', type=int, default=256)

args = parser.parse_args()

videoPath = args.input
packName = re.sub('[^a-z0-9-_]','',str.lower(args.name.replace(' ','_')))
resolution = args.res
if resolution > 256:
    resolution = 256

outPath = './V2M_output'
tempPath = outPath + '/temp'
texPath = outPath + '/'+ packName + '_resourcepack/assets/' + packName + '/textures'
fontPath = outPath + '/'+ packName + '_resourcepack/assets/' + packName + '/font'
datPkPath = outPath + '/'+ packName + '_datapack/data/' + packName + '/functions'

if os.path.isfile(texPath + '/video.png') == True:
    os.remove(texPath + '/video.png')
os.makedirs(tempPath,exist_ok=True)
os.makedirs(texPath,exist_ok=True)
os.makedirs(fontPath,exist_ok=True)
os.makedirs(datPkPath,exist_ok=True)

# ffmpegで20fps,256px(まで)にスケールして連番画像で出力
(
    ffmpeg
    .input(videoPath,ss=0)
    .filter('scale',resolution, -1)
    .filter('fps',fps=20,round='down')
    .output(tempPath + '/%00d.png')
    .run()
)

# cv2で連番画像を一つの画像に
frameEnd = len([_ for _ in os.listdir(tempPath) if _.endswith('.png')]) 
if frameEnd > 57344:
    frameEnd = 57344
images = [cv2.imread(tempPath + '/{}.png'.format(_)) for _ in range (1,frameEnd+1)]
cv2.imwrite(texPath + '/video.png', np.concatenate(images, axis=1))

shutil.rmtree(tempPath)

# フレーム数分のunicode割り当て用の文字列(\uE006みたいな)を生成 
frameList = []
for _ in range(4096,frameEnd+4096):
    frameList.append(r'\u' + format(_,'x').zfill(4))
# \u0000 ~ \u0fff , \uf000 ~ \uffffは割り当て出来ない部分があるので使わない

### font
## title.json
with open(fontPath + '/title.json','w',encoding='UTF-8') as file:
    _ = '{\n    "providers": [\n        {\n            "type": "bitmap",\n            "file": "'+ packName +':video.png",\n            "ascent": 40,\n            "height": 80,\n            "chars": [\n                "'+ ''.join(frameList) +'"\n            ]\n        }\n    ]\n}'
    file.write(_)

## sign.json
with open(fontPath + '/sign.json','w',encoding='UTF-8') as file:
    _ = '{\n    "providers": [\n        {\n            "type": "bitmap",\n            "file": "'+ packName +':video.png",\n            "ascent": 47,\n            "height": 54,\n            "chars": [\n                "'+ ''.join(frameList) +'"\n            ]\n        }\n    ]\n}'
    file.write(_)

## other.json
with open(fontPath + '/other.json','w',encoding='UTF-8') as file:
    _ = '{\n    "providers": [\n        {\n            "type": "bitmap",\n            "file": "'+ packName +':video.png",\n            "ascent": 54,\n            "height": 54,\n            "chars": [\n                "'+ ''.join(frameList) +'"\n            ]\n        }\n    ]\n}'
    file.write(_)

## reverse.json
with open(fontPath + '/reverse.json','w',encoding='UTF-8') as file:
    _ = '{\n    "providers": [\n        {\n            "type": "bitmap",\n            "file": "'+ packName +':video.png",\n            "ascent": 54,\n            "height": 54,\n            "chars": [\n                "'+ ''.join(frameList[::-1]) +'"\n            ]\n        }\n    ]\n}'
    file.write(_)

### Datapack
## init.mcfunction
frameList = []
for _ in range(4096,frameEnd+4096):
    frameList.append("'{\"text\":\"\\\\u" + format(_,'x').zfill(4) + "\"}'")

with open(datPkPath + '/init.mcfunction','w',encoding='UTF-8') as file:
    _ = 'data modify storage ' + packName + ': playing set value [' + ','.join(frameList) + ']\ndata modify storage ' + packName + ': played set value []'
    file.write(_)

## play.mcfunction
with open(datPkPath + '/play.mcfunction','w',encoding='UTF-8') as file:
    _ = 'data modify storage ' + packName + ': played append from storage ' + packName + ': playing[0]\ndata remove storage ' + packName + ': playing[0]'
    file.write(_)

## reverse.mcfunction
with open(datPkPath + '/reverse.mcfunction','w',encoding='UTF-8') as file:
    _ = 'data modify storage ' + packName + ': playing prepend from storage ' + packName + ': played[-1]\ndata remove storage ' + packName + ': played[-1]'
    file.write(_)

### pack.mcmeta
pack_mcmeta = '{\n    "pack": {\n        "pack_format": 7,\n        "description": "Generated by V2M"\n    }\n}'

with open(outPath + '/'+ packName + '_datapack/pack.mcmeta','w',encoding='UTF-8') as file:
    file.write(pack_mcmeta)
with open(outPath + '/'+ packName + '_resourcepack/pack.mcmeta','w',encoding='UTF-8') as file:
    file.write(pack_mcmeta)
